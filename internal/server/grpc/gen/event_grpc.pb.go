// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: event.proto

package simplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventService_GetEventsByPeriod_FullMethodName      = "/internalgrpc.EventService/GetEventsByPeriod"
	EventService_GetEventById_FullMethodName           = "/internalgrpc.EventService/GetEventById"
	EventService_CreateEventHandler_FullMethodName     = "/internalgrpc.EventService/CreateEventHandler"
	EventService_EditEventHandler_FullMethodName       = "/internalgrpc.EventService/EditEventHandler"
	EventService_DeleteEventHandlerById_FullMethodName = "/internalgrpc.EventService/DeleteEventHandlerById"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	GetEventsByPeriod(ctx context.Context, in *EventDateForPeriodRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	GetEventById(ctx context.Context, in *Event_Id, opts ...grpc.CallOption) (*GetEventResponse, error)
	CreateEventHandler(ctx context.Context, in *Event, opts ...grpc.CallOption) (*GetResponse, error)
	EditEventHandler(ctx context.Context, in *Event, opts ...grpc.CallOption) (*GetResponse, error)
	DeleteEventHandlerById(ctx context.Context, in *Event_Id, opts ...grpc.CallOption) (*GetResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) GetEventsByPeriod(ctx context.Context, in *EventDateForPeriodRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, EventService_GetEventsByPeriod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventById(ctx context.Context, in *Event_Id, opts ...grpc.CallOption) (*GetEventResponse, error) {
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, EventService_GetEventById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) CreateEventHandler(ctx context.Context, in *Event, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, EventService_CreateEventHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) EditEventHandler(ctx context.Context, in *Event, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, EventService_EditEventHandler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEventHandlerById(ctx context.Context, in *Event_Id, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, EventService_DeleteEventHandlerById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations must embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	GetEventsByPeriod(context.Context, *EventDateForPeriodRequest) (*GetEventsResponse, error)
	GetEventById(context.Context, *Event_Id) (*GetEventResponse, error)
	CreateEventHandler(context.Context, *Event) (*GetResponse, error)
	EditEventHandler(context.Context, *Event) (*GetResponse, error)
	DeleteEventHandlerById(context.Context, *Event_Id) (*GetResponse, error)
	mustEmbedUnimplementedEventServiceServer()
}

// UnimplementedEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) GetEventsByPeriod(context.Context, *EventDateForPeriodRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsByPeriod not implemented")
}
func (UnimplementedEventServiceServer) GetEventById(context.Context, *Event_Id) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventById not implemented")
}
func (UnimplementedEventServiceServer) CreateEventHandler(context.Context, *Event) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventHandler not implemented")
}
func (UnimplementedEventServiceServer) EditEventHandler(context.Context, *Event) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEventHandler not implemented")
}
func (UnimplementedEventServiceServer) DeleteEventHandlerById(context.Context, *Event_Id) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventHandlerById not implemented")
}
func (UnimplementedEventServiceServer) mustEmbedUnimplementedEventServiceServer() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_GetEventsByPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventDateForPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventsByPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventsByPeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventsByPeriod(ctx, req.(*EventDateForPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event_Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_GetEventById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventById(ctx, req.(*Event_Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_CreateEventHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEventHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_CreateEventHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEventHandler(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_EditEventHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).EditEventHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_EditEventHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).EditEventHandler(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEventHandlerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event_Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEventHandlerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventService_DeleteEventHandlerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEventHandlerById(ctx, req.(*Event_Id))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internalgrpc.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventsByPeriod",
			Handler:    _EventService_GetEventsByPeriod_Handler,
		},
		{
			MethodName: "GetEventById",
			Handler:    _EventService_GetEventById_Handler,
		},
		{
			MethodName: "CreateEventHandler",
			Handler:    _EventService_CreateEventHandler_Handler,
		},
		{
			MethodName: "EditEventHandler",
			Handler:    _EventService_EditEventHandler_Handler,
		},
		{
			MethodName: "DeleteEventHandlerById",
			Handler:    _EventService_DeleteEventHandlerById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
